lexer {

   # skip will be default
   # WhiteSpace: skip()

   # surroundDynamic tries to match the longest starting substring of the input then tries to pair it with the ending substring
   String: {
   		escape(`\`)
   		surround(`\``)
   }

   MultiLineString: {
   		surround(`\`\`\``)
   }

   # Deprecated: Can be determined from parser examples
   #Keywords: ```
   #    lexer parser test
   #```

   # Operators are in order of precedence
   Operators: ```
       { } ( ) , * +
   ```

}

# Types shared with sub parsers
parser(Type) {

	Example {
        example(`example(value:String)`)
    }

    Parameters {
    	settings {
    		seperator(",")
    	}
    }

	Call {
		example(`${name:Identifier}()`)
	}

}

# Top scope
parser(Main) {

	Lexer {
		example(`lexer { $body(Lexer) }`)
	}

	Parser {
	     example(`parser { $body(Parser) }`)
	     example(`parser($scope:Identifier) { $body(Parser) }`)
	}

	Test {
		example(`test { $body(Test) }`)
	}

	example(Lexer*, Parser*, Test*)
}

parser(Lexer) {
	example(Example*)
}

parser(Parser) {

    Body {
		example(`body($Parameters)`)
	}

	example(Example*)
	example(Body*)
}

body(Test) {
	example(Example*)
}